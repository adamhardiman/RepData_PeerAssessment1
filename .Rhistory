with(mtcars, boxplot(mpg~cyl))
with(mtcars, hist(cyl))
with(mtcars, table(cyl, am))
with(mtcars, plot(cyl, mpg))
with(mtcars, plot(wt, mpg))
with(mtcars, plot(wt, mpg))
with(mtcars, plot(cyl,mpg))
with(mtcars, table(cyl, am))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, color = "blue"))
with(subset(mtcars, am != 1), points (cyl, mpg, color = "red"))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red"))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red"))
with(mtcars, plot(wt, mpg))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red"))
?mtcars
par(mfrow= c(1,3))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red"))
with(mtcars, table(cyl, am))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red"))
quartz()
par(mfrow= c(1,3))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red"))
with(mtcars, table(cyl, am))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red"))
hist(am)
hist(mtcars$am)
?mtcars
par(mfrow= c(1,3))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red"))
legend("topright", col = c("blue","red"), legend = c("Manual", "Automatic"))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red"))
legend("topright", col = c("blue","red"), legend = c("Manual", "Automatic"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue"))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red"))
legend("topright", col = c("blue","red"), legend = c("Manual", "Automatic"))
source('~/RegressionModel_Project1.R', echo=TRUE)
par(mfrow= c(1,3))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red", pch = 1))
legend("topright",pch = 1,  col = c("blue","red"), legend = c("Manual", "Automatic"))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red", pch = 1))
legend("topright", col = c("blue","red"), legend = c("Manual", "Automatic"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red", pch = 1))
legend("topright", col = c("blue","red"), legend = c("Manual", "Automatic"))
par(mfrow= c(1,3))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red", pch = 1))
legend("topright",pch = 1,  col = c("blue","red"), legend = c("Manual", "Automatic"))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Manual", "Automatic"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Manual", "Automatic"))
par(mfrow= c(1,3))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red", pch = 1))
legend("topright",pch = 1,  col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
par(mfrow= c(2,2))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red", pch = 1))
legend("topright",pch = 1,  col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(displ, mpg, type = "n"))
with(subset(mtcars, am == 1), points (displ, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (displ), mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red", pch = 1))
legend("topright",pch = 1,  col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(displ, mpg, type = "n"))
with(subset(mtcars, am == 1), points (displ, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (displ, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
par(mfrow= c(2,2))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red", pch = 1))
legend("topright",pch = 1,  col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(displ, mpg, type = "n"))
with(subset(mtcars, am == 1), points (displ, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (displ, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
par(mfrow= c(2,2))
with(mtcars, plot(cyl, mpg,type = "n"))
with(subset(mtcars, am == 1), points (cyl, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (cyl, mpg, col = "red", pch = 1))
legend("topright",pch = 1,  col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(wt, mpg, type = "n"))
with(subset(mtcars, am == 1), points (wt, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (wt, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(hp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (hp, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (hp, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
with(mtcars, plot(disp, mpg, type = "n"))
with(subset(mtcars, am == 1), points (disp, mpg, col = "blue", pch = 1))
with(subset(mtcars, am != 1), points (disp, mpg, col = "red", pch = 1))
legend("topright", pch = 1, col = c("blue","red"), legend = c("Automatic", "Manual"))
install.packages("knitr")
?anova
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent,galton)
dev.current()
dev.off()
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
install.packages("RMySQL")
library(RMySQL)
swirl()
swirl()
fit <- lm(child~parent,galton)
fit$residuals
summary(fit)
fit$residuals
mean(feat$residuals)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
help
info()
lhs-rhs
all.equal(lhs,rhs)
varChild(galton$child)
varChild<- var(galton$child)
fit$residuals
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
InstallCourses
?InstallCourses
install_from_swirl()
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
install_from_swirl("Statistical_Inferences")
install_from_swirl("Statistical_Inference")
swirl()
info
info()
bye()
dev.list()
dev.cur()
dev.set(3)
dev.cur()
?dev
??dev
dev.next()
dev.cur
dev.cur()
dev.off()
dev.off()
dev.off(3)
dev.off(which = 3)
dev.list()
plot(x,y)
library(RMySQL)
ucscDB <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDB)
hg19 <- dbConnect(MySQL(), user="genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
length(hg19)
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery (hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query , n = 10)
affyMis <- fetch(query)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
bicLite("rhdf5")
bicLite("rhdf5")
biocLite("rhdf5")
con = url("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
xpathSApply(html, "//title", xmlValue)
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en"
html <- htmlTreeParse (url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
con = url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ")
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse (url, useInternalNodes = T)
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ"
html <- htmlTreeParse (url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
library(httr)
html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml,"//title", xmlValue)
google = handle("http://google.com")
pg1 = GET(handle = google, path="/")
pg2 = GET(handle = google, path = "search")
pg1
pg2
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
myapp = oauth_app("twitter",
sig = sign_oauth1.0(myapp,
myapp = oauth_app("twitter",
key = "jYD15GaXnVjoEvWfa9mr5MD7k", secret="IGdZunJypBNdam38saSqCrx9qSyaSrNsgfxHqYSFEBempgKQro")
sig = sign_oauth1.0(myapp,
token = "3376437069-e0AktmQbdGQaTl9o5t9UcTfDWgnk7eESf0vaqAK"
myapp = oauth_app("twitter",
key = "jYD15GaXnVjoEvWfa9mr5MD7k", secret="IGdZunJypBNdam38saSqCrx9qSyaSrNsgfxHqYSFEBempgKQro")
sig = sign_oauth1.0(myapp,
token = "3376437069-e0AktmQbdGQaTl9o5t9UcTfDWgnk7eESf0vaqAK"
token_secret = "JOfoPIJYInZ3BiWbQcS9XL0fhuo8C1SvdLCPgLM3BExLB")
myapp = oauth_app("twitter",
key = "jYD15GaXnVjoEvWfa9mr5MD7k", secret="IGdZunJypBNdam38saSqCrx9qSyaSrNsgfxHqYSFEBempgKQro")
sig = sign_oauth1.0(myapp,
token = "3376437069-e0AktmQbdGQaTl9o5t9UcTfDWgnk7eESf0vaqAK",
token_secret = "JOfoPIJYInZ3BiWbQcS9XL0fhuo8C1SvdLCPgLM3BExLB")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
homeTL = GET("https://api.twitter.com/1.1/search/tweets.json",sig)
install.packages("sqdlf")
library("sqdlf")
install.packages("sqdlf")
install.packages("~/Downloads/sqldf_0.4-10.tar.gz", repos = NULL, type = "source")
install.packages("gsubfn")
install.packages("RSQLite")
library('gsubfn')
install.packages("tcltk")
library(RSQLite)
library(tcltk)
library(gsubfn)
install.packages("~/Downloads/sqldf_0.4-10.tar.gz", repos = NULL, type = "source")
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
acs <- read.table("~/Downloads/getdata-data-ss06pid.csv")
acs <- read.table("~/Downloads/getdata-data-ss06pid.csv", header = T)
head(acs)
acs <- read.table("~/Downloads/getdata-data-ss06pid.csv")
head(acs)
acs <- read.csv("~/Downloads/getdata-data-ss06pid.csv")
head(ac)
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
options(sqldf.driver = "SQLite")
options(gsubfn.engine = "R")
acs <- read.csv("~/Downloads/getdata-data-ss06pid.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select DISTINCT AGEP")
sqldf("select DISTINCT AGEP from acs")
library(httr)
html2 = GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml,"//title", xmlValue)
content2
url = "http://biostat.jhsph.edu/~jleek/contact.html"
con <- readLines("http://biostat.jhsph.edu/~jleek/contact.html")
con
?nchar()
nchar(con[10])
nchar(con[20])
nchar(con[30])
nchar(con[100])
c(nchar(con[10]),nchar(con[20]),nchar(con[30]),nchar(con[100]))
q5 <- read.table("fixwidth.for")
q5 <- read.table("~/Downloads/fixwidth.for")
q5 <- read.table("~/Downloads/fixwidth.for", header = T)
?read.table
q5 <- read.table("~/Downloads/fixwidth.for", header = T, sep = 'white space')
q5 <- read.table("~/Downloads/fixwidth.for", header = T, sep = 'white space', skip = 1)
?whatever
??whatever
??"fixing fixed width files"
?read.table()
q5 <- read.table("~/Downloads/fixwidth.for", header = T, sep = 'white space', skip = 4)
read.fortran()
?read.fortran()
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4)
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = "rA9")
q5
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = "A9")
q5
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = "rA9")
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = "A9")
forMat = c("A9", "F3", "F2", "F3", "F2", "F3", "F2", "F3", "F2")
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
q5
head(q5)
forMat = c("A9", "F4", "F2", "F3", "F2", "F3", "F2", "F3", "F2")
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
forMat = c("A9", "F3.2","A1", "F2", "F3.2","A1", "F2", "F3.2","A1", "F2", "F3.2","A1", "F2")
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
forMat = c("A9", "F3.2", "A1")
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
q5
head(q5
)
forMat = c('A9', 'X6', "F4")
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
head(q5)
forMat = c('A9', 'X6', "F4", 'X1', 'F3', 'X6', 'F4','X1','F3','X6','F4','X1','F3','X6')
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
forMat = c('A9', 'X6', "F4", 'X1', 'F3', 'X5', 'F4','X1','F3','X5','F4','X1','F3','X5')
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
head(q5)
forMat = c('A9', 'X6', "F4", 'X1', 'F3', 'X5', 'F4','X1','F3','X5','F4','X1','F3','X5','F4','X1','F3','X5','F4','X1','F3','X5')
head(q5)
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
head(q5)
forMat = c('A9', 'X6', "F4", 'X1', 'F3', 'X5', 'F4','X1','F3','X5','F4','X1','F3','X5','F4','X1','F3')
q5 <- read.fortran("~/Downloads/fixwidth.for", skip = 4, format = forMat)
head(q5)
colSums(q5[4,])
q5[4,]
q5[,4]
colSums(q5[,4])
?sum
sum(q5[,4])
sum(q5[,4])
library(plyr)
?plyr
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
library(datasets)
cd
list.files()
setwd(list.files[27])
list.files()[27]
setwd(list.files()[27])
setwd("~/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
data
head(data)
tail(data)
head(data, n = 100)
mean(data[1,])
mean(data[1,], na.rm = F)
mean(data[1,], na.rm = FALSE)
mean(data[,1], na.rm = FALSE)
?mean
data[,1]
mean(data[,1])
mean(data[,1], na.rm = T)
head(data, n = 20)
data$steps
data$date
unique(data$date)
?aggregate()
names(data)
head(data)
data$interval
aggregate(data$steps, list(unique(data$date)),sum, na.rm = T)
aggregate(data$steps, list((data$date)),sum, na.rm = T)
hist(daily.data)
daily.data <- aggregate(data$steps, list((data$date)),sum, na.rm = T)
hist(daily.data[,2])
summary(daily.data[,2])
hist(daily.data[,2], xlab = "Steps")
?hist()
hist(daily.data[,2], xlab = "Steps", breaks = 1000)
hist(daily.data[,2], xlab = "Steps", breaks = 100)
hist(daily.data[,2], xlab = "Steps", breaks = 10)
hist(daily.data[,2], xlab = "Steps", breaks = 10, main = "Histogram of the Number of Steps per Day")
quartz()
hist(daily.data[,2], xlab = "Steps", breaks = 10, main = "Histogram of the Number of Steps per Day")
?hist
hist(daily.data[,2], xlab = "Steps", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
hist(daily.data[,2], xlab = "Steps", ylab = "Number of Steps" breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
hist(daily.data[,2], xlab = "Steps", ylab = "Number of Steps", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
hist(daily.data[,2], xlab = "Days", ylab = "Number of Steps", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
quartz()
hist(daily.data[,2], xlab = "Days", ylab = "Number of Steps", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
hist(daily.data[,2], xlab = "Days", ylab = "Number of Steps", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
summary(daily.data[,2])
hist(daily.data[,2], xlab = "Number of Steps", ylab = "Days", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
quartz()
hist(daily.data[,2], xlab = "Number of Steps", ylab = "Days", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
hist(daily.data[,2], xlab = "Number of Steps", ylab = "Days", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
?abline
abline (a = mean(daily.data[,2]), b = inf, col = "RED", lwd = 4)
abline (a = mean(daily.data[,2]), b = 99999999999, col = "RED", lwd = 4)
mean(daily.data[,2])
0
abline (a = mean(daily.data[,2]), b = 0, col = "RED", lwd = 4)
abline (a = mean(daily.data[,2]), b = 0, col = "BLUE", lwd = 4)
hist(daily.data[,2], xlab = "Number of Steps", ylab = "Days", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
abline (a = mean(daily.data[,2]), b = 0, col = "BLUE", lwd = 4)
abline (v = mean(daily.data[,2]), col = "BLUE", lwd = 4)
abline (v = mean(daily.data[,2]), col = "BLUE", lwd = 4, label = "Mean")
abline (v = mean(daily.data[,2]), col = "BLUE", lwd = 4)
abline(v = median(daily.data[,2]), col = "Yellow", lwd = 4)
text(locator(), labels = c("","Mean", "Median"))
#PeerAssessment1.Reproducible Research
#==================================================
setwd("~/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
#getting data for sum of
daily.data <- aggregate(data$steps, list((data$date)),sum, na.rm = T)
quartz()
hist(daily.data[,2], xlab = "Number of Steps", ylab = "Days", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
summary(daily.data[,2])
with(abline(v = mean(daily.data[,2]), col = "BLACK", lwd = 4), abline(v = median(daily.data[,2]), col = "GREEN", lwd = 4))
hist(daily.data[,2], xlab = "Number of Steps", ylab = "Days", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
with(abline(v = mean(daily.data[,2]), col = "BLACK", lwd = 4), abline(v = median(daily.data[,2]), col = "GREEN", lwd = 4))
quartz()
hist(daily.data[,2], xlab = "Number of Steps", ylab = "Days", breaks = 10, main = "Histogram of the Number of Steps per Day",col = "RED")
with(abline(v = mean(daily.data[,2]), col = "BLACK", lwd = 4), abline(v = median(daily.data[,2]), col = "GREEN", lwd = 4))
summary(daily.data[,2])
legend("topright", lty = c(1,1), col = c("BLACK","GREEN"), lwd = c(4,4))
legend("topright", lty = c(1,1), col = c("BLACK","GREEN"), lwd = c(4,4), legend = c("Mean", "Median"))
aggregate(data$steps, list(data$intervals), mean, na.rm = T)
names(data)
aggregate(data$steps, list(data$interval), mean, na.rm = T)
hourly.data <- aggregate(data$steps, list(data$interval), mean, na.rm = T)
plot(hourly.data)
plot(hourly.data, type = "l")
max(hourly.data$Group.1)
max(hourly.data$x)
which.max(hourly.data$x)
hourly.data[which.max(hourly.data$x),]
hourly.data[which.max(hourly.data$x),1]
?weekdays
names(data)
activity.data <- read.csv("activity.csv")
hourly.data <- aggregate(activity.data$steps, list(activity.data$interval), mean, na.rm = T)
plot(hourly.data, type = "l")
hourly.data[which.max(hourly.data$x),1]
names(activity.data)
weekdays(activity.data$date)
?weekdays
weekdays(as.Date(activity.data$date))
#What is the difference between weekdays and weekend
